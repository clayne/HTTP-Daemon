=pod

=encoding UTF-8

=head1 NAME

HTTP::Daemon - A simple http server class

=head1 VERSION

version 6.13

=head1 SYNOPSIS

  use HTTP::Daemon;
  use HTTP::Status;

  my $d = HTTP::Daemon->new || die;
  print "Please contact me at: <URL:", $d->url, ">\n";
  while (my $c = $d->accept) {
      while (my $r = $c->get_request) {
      if ($r->method eq 'GET' and $r->uri->path eq "/xyzzy") {
              # remember, this is *not* recommended practice :-)
          $c->send_file_response("/etc/passwd");
      }
      else {
          $c->send_error(RC_FORBIDDEN)
      }
      }
      $c->close;
      undef($c);
  }

=head1 DESCRIPTION

Instances of the C<HTTP::Daemon> class are HTTP/1.1 servers that
listen on a socket for incoming requests. The C<HTTP::Daemon> is a
subclass of C<IO::Socket::IP>, so you can perform socket operations
directly on it too.

Please note that C<HTTP::Daemon> used to be a subclass of C<IO::Socket::INET>.
To support IPv6, it switched the parent class to C<IO::Socket::IP> at version 6.05.
See L</IPv6 SUPPORT> for details.

The accept() method will return when a connection from a client is
available.  The returned value will be an C<HTTP::Daemon::ClientConn>
object which is another C<IO::Socket::IP> subclass.  Calling the
get_request() method on this object will read data from the client and
return an C<HTTP::Request> object.  The ClientConn object also provide
methods to send back various responses.

This HTTP daemon does not fork(2) for you.  Your application, i.e. the
user of the C<HTTP::Daemon> is responsible for forking if that is
desirable.  Also note that the user is responsible for generating
responses that conform to the HTTP/1.1 protocol.

The following methods of C<HTTP::Daemon> are new (or enhanced) relative
to the C<IO::Socket::IP> base class:

=over 4

=item $d = HTTP::Daemon->new

=item $d = HTTP::Daemon->new( %opts )

The constructor method takes the same arguments as the
C<IO::Socket::IP> constructor, but unlike its base class it can also
be called without any arguments.  The daemon will then set up a listen
queue of 5 connections and allocate some random port number.

A server that wants to bind to some specific address on the standard
HTTP port will be constructed like this:

  $d = HTTP::Daemon->new(
           LocalAddr => 'www.thisplace.com',
           LocalPort => 80,
       );

See L<IO::Socket::IP> for a description of other arguments that can
be used to configure the daemon during construction.

=item $c = $d->accept

=item $c = $d->accept( $pkg )

=item ($c, $peer_addr) = $d->accept

This method works the same as the one provided by the base class, but it
returns an C<HTTP::Daemon::ClientConn> reference by default.  If a
package name is provided as argument, then the returned object will be
blessed into the given class.  It is probably a good idea to make that
class a subclass of C<HTTP::Daemon::ClientConn>.

The accept method will return C<undef> if timeouts have been enabled
and no connection is made within the given time.  The timeout() method
is described in L<IO::Socket::IP>.

In list context both the client object and the peer address will be
returned; see the description of the accept method of L<IO::Socket> for
details.

=item $d->url

Returns a URL string that can be used to access the server root.

=item $d->product_tokens

Returns the name that this server will use to identify itself.  This
is the string that is sent with the C<Server> response header.  The
main reason to have this method is that subclasses can override it if
they want to use another product name.

The default is the string "libwww-perl-daemon/#.##" where "#.##" is
replaced with the version number of this module.

=back

The C<HTTP::Daemon::ClientConn> is a subclass of C<IO::Socket::IP>.
Instances of this class are returned by the accept() method
of C<HTTP::Daemon>.  The following methods are provided:

=over 4

=item $c->get_request

=item $c->get_request( $headers_only )

This method reads data from the client and turns it into an
C<HTTP::Request> object which is returned.  It returns C<undef>
if reading fails.  If it fails, then the C<HTTP::Daemon::ClientConn>
object ($c) should be discarded, and you should not try to call this
method again on it.  The $c->reason method might give you some
information about why $c->get_request failed.

The get_request() method will normally not return until the whole
request has been received from the client.  This might not be what you
want if the request is an upload of a large file (and with chunked
transfer encoding HTTP can even support infinite request messages -
uploading live audio for instance).  If you pass a TRUE value as the
$headers_only argument, then get_request() will return immediately
after parsing the request headers and you are responsible for reading
the rest of the request content.  If you are going to call
$c->get_request again on the same connection you better read the
correct number of bytes.

=item $c->read_buffer

=item $c->read_buffer( $new_value )

Bytes read by $c->get_request, but not used are placed in the I<read
buffer>.  The next time $c->get_request is called it will consume the
bytes in this buffer before reading more data from the network
connection itself.  The read buffer is invalid after $c->get_request
has failed.

If you handle the reading of the request content yourself you need to
empty this buffer before you read more and you need to place
unconsumed bytes here.  You also need this buffer if you implement
services like I<101 Switching Protocols>.

This method always returns the old buffer content and can optionally
replace the buffer content if you pass it an argument.

=item $c->reason

When $c->get_request returns C<undef> you can obtain a short string
describing why it happened by calling $c->reason.

=item $c->proto_ge( $proto )

Return TRUE if the client announced a protocol with version number
greater or equal to the given argument.  The $proto argument can be a
string like "HTTP/1.1" or just "1.1".

=item $c->antique_client

Return TRUE if the client speaks the HTTP/0.9 protocol.  No status
code and no headers should be returned to such a client.  This should
be the same as !$c->proto_ge("HTTP/1.0").

=item $c->head_request

Return TRUE if the last request was a C<HEAD> request.  No content
body must be generated for these requests.

=item $c->force_last_request

Make sure that $c->get_request will not try to read more requests off
this connection.  If you generate a response that is not self-delimiting,
then you should signal this fact by calling this method.

This attribute is turned on automatically if the client announces
protocol HTTP/1.0 or worse and does not include a "Connection:
Keep-Alive" header.  It is also turned on automatically when HTTP/1.1
or better clients send the "Connection: close" request header.

=item $c->send_status_line

=item $c->send_status_line( $code )

=item $c->send_status_line( $code, $mess )

=item $c->send_status_line( $code, $mess, $proto )

Send the status line back to the client.  If $code is omitted 200 is
assumed.  If $mess is omitted, then a message corresponding to $code
is inserted.  If $proto is missing the content of the
$HTTP::Daemon::PROTO variable is used.

=item $c->send_crlf

Send the CRLF sequence to the client.

=item $c->send_basic_header

=item $c->send_basic_header( $code )

=item $c->send_basic_header( $code, $mess )

=item $c->send_basic_header( $code, $mess, $proto )

Send the status line and the "Date:" and "Server:" headers back to
the client.  This header is assumed to be continued and does not end
with an empty CRLF line.

See the description of send_status_line() for the description of the
accepted arguments.

=item $c->send_header( $field, $value )

=item $c->send_header( $field1, $value1, $field2, $value2, ... )

Send one or more header lines.

=item $c->send_response( $res )

Write an C<HTTP::Response> object to the
client as a response.  We try hard to make sure that the response is
self-delimiting so that the connection can stay persistent for further
request/response exchanges.

The content attribute of the C<HTTP::Response> object can be a normal
string or a subroutine reference.  If it is a subroutine, then
whatever this callback routine returns is written back to the
client as the response content.  The routine will be called until it
returns an undefined or empty value.  If the client is HTTP/1.1 aware
then we will use chunked transfer encoding for the response.

=item $c->send_redirect( $loc )

=item $c->send_redirect( $loc, $code )

=item $c->send_redirect( $loc, $code, $entity_body )

Send a redirect response back to the client.  The location ($loc) can
be an absolute or relative URL. The $code must be one of the redirect
status codes, and defaults to "301 Moved Permanently"

=item $c->send_error

=item $c->send_error( $code )

=item $c->send_error( $code, $error_message )

Send an error response back to the client.  If the $code is missing a
"Bad Request" error is reported.  The $error_message is a string that
is incorporated in the body of the HTML entity.

=item $c->send_file_response( $filename )

Send back a response with the specified $filename as content.  If the
file is a directory we try to generate an HTML index of it.

=item $c->send_file( $filename )

=item $c->send_file( $fd )

Copy the file to the client.  The file can be a string (which
will be interpreted as a filename) or a reference to an C<IO::Handle>
or glob.

=item $c->daemon

Return a reference to the corresponding C<HTTP::Daemon> object.

=back

=head1 IPv6 SUPPORT

Since version 6.05, C<HTTP::Daemon> is a subclass of C<IO::Socket::IP>
rather than C<IO::Socket::INET>, so that it supports IPv6.

For some reasons, you may want to force C<HTTP::Daemon> to listen on IPv4 addresses only.
Then pass C<Family> argument to C<< HTTP::Daemon->new >>:

  use HTTP::Daemon;
  use Socket 'AF_INET';

  my $d = HTTP::Daemon->new(Family => AF_INET);

=head1 SEE ALSO

RFC 2616

L<IO::Socket::IP>, L<IO::Socket>

=head1 SUPPORT

Bugs may be submitted through L<https://github.com/libwww-perl/HTTP-Daemon/issues>.

There is also a mailing list available for users of this distribution, at
L<mailto:libwww@perl.org>.

There is also an irc channel available for users of this distribution, at
L<C<#lwp> on C<irc.perl.org>|irc://irc.perl.org/#lwp>.

=head1 AUTHOR

Gisle Aas <gisle@activestate.com>

=head1 CONTRIBUTORS

=for stopwords Olaf Alders Ville Skyttä Karen Etheridge Mark Stosberg Shoichi Kaji Chase Whitener Slaven Rezic Petr Písař Zefram Alexey Tourbin Bron Gondwana Mike Schilli Tom Hukins Adam Kennedy Sjogren Alex Kapranoff amire80 Andreas J. Koenig Bill Mann Daniel Hedlund David E. Wheeler DAVIDRW Father Chrysostomos Ferenc Erki FWILES Gavin Peters Graeme Thompson Hans-H. Froehlich Ian Kilgore Jacob J jefflee john9art murphy Ondrej Hanak Perlover Peter Rabbitson phrstbrn Robert Stone Rolf Grossmann ruff sasao Sean M. Burke Spiros Denaxas Steve Hay Todd Lipcon Tony Finch Toru Yamaguchi Yuri Karaban

=over 4

=item *

Olaf Alders <olaf@wundersolutions.com>

=item *

Ville Skyttä <ville.skytta@iki.fi>

=item *

Karen Etheridge <ether@cpan.org>

=item *

Mark Stosberg <MARKSTOS@cpan.org>

=item *

Shoichi Kaji <skaji@cpan.org>

=item *

Chase Whitener <capoeirab@cpan.org>

=item *

Slaven Rezic <slaven@rezic.de>

=item *

Petr Písař <ppisar@redhat.com>

=item *

Zefram <zefram@fysh.org>

=item *

Alexey Tourbin <at@altlinux.ru>

=item *

Bron Gondwana <brong@fastmail.fm>

=item *

Mike Schilli <mschilli@yahoo-inc.com>

=item *

Tom Hukins <tom@eborcom.com>

=item *

Adam Kennedy <adamk@cpan.org>

=item *

Adam Sjogren <asjo@koldfront.dk>

=item *

Alex Kapranoff <ka@nadoby.ru>

=item *

amire80 <amir.aharoni@gmail.com>

=item *

Andreas J. Koenig <andreas.koenig@anima.de>

=item *

Bill Mann <wfmann@alum.mit.edu>

=item *

Daniel Hedlund <Daniel.Hedlund@eprize.com>

=item *

David E. Wheeler <david@justatheory.com>

=item *

DAVIDRW <davidrw@cpan.org>

=item *

Father Chrysostomos <sprout@cpan.org>

=item *

Ferenc Erki <erkiferenc@gmail.com>

=item *

FWILES <FWILES@cpan.org>

=item *

Gavin Peters <gpeters@deepsky.com>

=item *

Graeme Thompson <Graeme.Thompson@mobilecohesion.com>

=item *

Hans-H. Froehlich <hfroehlich@co-de-co.de>

=item *

Ian Kilgore <iank@cpan.org>

=item *

Jacob J <waif@chaos2.org>

=item *

jefflee <shaohua@gmail.com>

=item *

john9art <john9art@yahoo.com>

=item *

murphy <murphy@genome.chop.edu>

=item *

Ondrej Hanak <ondrej.hanak@ubs.com>

=item *

Perlover <perlover@perlover.com>

=item *

Peter Rabbitson <ribasushi@cpan.org>

=item *

phrstbrn <phrstbrn@gmail.com>

=item *

Robert Stone <talby@trap.mtview.ca.us>

=item *

Rolf Grossmann <rg@progtech.net>

=item *

ruff <ruff@ukrpost.net>

=item *

sasao <sasao@yugen.org>

=item *

Sean M. Burke <sburke@cpan.org>

=item *

Spiros Denaxas <s.denaxas@gmail.com>

=item *

Steve Hay <SteveHay@planit.com>

=item *

Todd Lipcon <todd@amiestreet.com>

=item *

Tony Finch <dot@dotat.at>

=item *

Toru Yamaguchi <zigorou@cpan.org>

=item *

Yuri Karaban <tech@askold.net>

=back

=head1 COPYRIGHT AND LICENCE

This software is copyright (c) 1995 by Gisle Aas.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
